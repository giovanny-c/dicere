<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dicere</title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.socket.io/4.6.0/socket.io.min.js" integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="styles/styles.css">
</head>
<body>
    <span>{{user.name}}</span>

    <div class="users">
        <p>Usuarios conectados</p>

        
    </div>

    <form id=chat>
        <div class="messages"></div>
        <input type="text" name="message" placeholder="...">
        <button type="submit">Enviar</button>
    </form>
    <div class="rooms">
   
    </div>



    
    <script type="text/javascript">
   
        const user = {{user | dump | safe}}

        

        var socket = io("http://localhost:3333", {
                autoConnect: false
        })
        
        
////CONEXAO
        //connecta o user no socket.io se houver um user_id
        function onLoginSelection(user_id) {
            
            socket.auth = {user_id}

            socket.connect();

        }

        onLoginSelection("{{user.id}}")

////ERRORS
        //se houver erro
        socket.on("connect_error", (err) => {
            if (err.message === "invalid username") {
                console.log("error:" + err)
            }

            socket.off("connect_error")
        })



        socket.on("emit_error", (err) => {
            console.log(err)
        })

       
//// USERS

        function createReceiverInput(receiver){
            
            
            $("<input>").attr({
                type: "hidden",
                
                name: "receiver",
                value: receiver
            })
            .appendTo("form")
        }


        function catchReceiver(event, receiver){
            
            //se for do click no botao, nao do enviar
            if(!receiver){

                receiver = event.target.id

                socket.emit("request_previous_messages", {user_id: receiver})

            }

            //vai pedir as msgs desse user

            //cria um botao para mandar a msg pra um user
            if(receiver !== user.id){
                if(!$("input[name=receiver]").length){

                    createReceiverInput(receiver)
                }else{
            
                    $("input[name=receiver]").val(receiver)

                }
            }

            
        } 

        function createUserDiv(socket){


            if(!$("button#"+socket.user.id).length){
            
                $("<div>", {
                    class: "user"    
                }).appendTo(".users")

                
                $("<button/>", {
                    text: socket.user.name, 
                    id: socket.user.id,
                    on: {
                        click: function (event){
                        
                            catchReceiver(event) 

                            //remove o new message
                            const new_message = $(this).parent().find(".new_message")

                            if(new_message){
                                new_message.remove()
                            }       
                        
                        }
                    }
                   
                }).appendTo(".user")
            }
            
        }

        //carrega os users online
        socket.on("users", (sockets) => {
 
            for(const socket of sockets){ 
             
                if(socket.user.id !== user.id){

                    createUserDiv(socket)
                }    
                
            }
      
        })


        //update dos users online        
        socket.on("user_connected", (socket) => {

            //$("<div>", {class:"online_users"}).appendTo("body")
            if(!$(`#${socket.user.id}`).length){ 
               
               if(socket.user.id !== user.id){
                    createUserDiv(socket)
                }    
                
            }else{
                $(`#${socket.user.id}`).removeClass("offline")
            }
           
        })

        socket.on("user_disconnected", (user) => {
            
            const userDiv = $("#"+user.id).addClass("offline")

            //userDiv.click(function(event){
            // preventDefault()
            //})??
            //console.log("saiu" + )
        })


//// MENSAGENS

        //para o usuario que mandou
        function renderSubmitedMessage(message){

            $(".messages").append("<div class='message'> <strong> " + message.sender.name + "</strong>: " + message.message +"</div>")
        
        }

        //para um user que vai receber
        function renderEmitedMessage(message){
        
             //se for de um usuario
            if(message.sender.id){
                
                catchReceiver(event, message.sender.id)
            }

            $(".messages").append("<div class='message'> <strong> " + message.sender.name + "</strong>: " + message.message +"</div>")
        
        
        }

        // <!--vai pegar as msgs passadaas-->
        //carrega msgs antigas
       // socket.on("previous_messages", (messages) => {
        //    for(message of messages){
        //        renderEmitedMessage(message)
        //    }
        //})

        socket.on("previous_messages", (messages) => {

            $(".message").remove()

            

            for(message of messages){
            
                renderSubmitedMessage(message)
            
            }

        })

   
        // <!--vai pegar a msg que foi emitida e exibir para os outros users -->
        socket.on("emit_message", (message) => {

            if($("input[name=receiver]").val() === message.sender.id){
                
                renderEmitedMessage(message)
            
            }
            else{
            
                const userDiv =  $(`button#${message.sender.id}`).parent()
            
                userDiv.append($("<span>", {class: "new_message", text: "."}))

/*
                socket.emit("message_not_readed", {
                    from: message.sender.id
                })
*/
            
            }
            

        })

        

        {# const receiver #}

        // vai mandar a msg pro servidor
        $("#chat").submit(function(event){
    
            event.preventDefault()

            var message = $("input[name=message]").val()

            $("input[name=message]").val("")

            var receiver_id = $("input[name=receiver]").val()
            
            if(message.length){

                var messageObject = {
                    sender: {name:"{{user.name}}", id:"{{user.id}}"},
                    receiver: {id: receiver_id},
                    message
                }
    
                //renderiza na tela de que esta enviando apenas
                renderSubmitedMessage(messageObject)

                //envia pro servidor, para ser emitada para outro user
                
                socket.emit("send_message", messageObject)

            }


        }) 



////TROCA DE SALA
        //muda de sala
        $(".room").click(function(event){
        
            const [, room] = event.target.className.split(" ")



            socket.emit("join_room", room)
        
        })

        

        
        

    </script>

</body>
</html>