<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dicere</title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.socket.io/4.6.0/socket.io.min.js" integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="styles/styles.css">
</head>
<body>
    <span>{{user.name}}</span>
    <form id=chat>
        <div class="messages"></div>
        <input type="text" name="message" placeholder="...">
        <button type="submit">Enviar</button>
    </form>
    <div class="rooms">
{#         
        <div>
        
            <button class="room room_1">sala 1</button>
            

        </div>
        <div>
        
            <button class="room room_2">sala 2</button>
            

        </div>
        <div>
        
            <button class="room room_3">sala 3</button>
            

        </div>
         #}

    </div>



    
    <script type="text/javascript">
   
        const user = {{user | dump | safe}}

        

        var socket = io("http://localhost:3333", {
                autoConnect: false
        })
        
        

        //connecta o user no socket.io se houver um user_id
        function onLoginSelection(user_id) {
            
            socket.auth = {user_id}

            socket.connect();

        }

        onLoginSelection("{{user.id}}")


        //se houver erro
        socket.on("connect_error", (err) => {
            if (err.message === "invalid username") {
                console.log("error:" + err)
            }

            socket.off("connect_error")
        })



        socket.on("emit_error", (err) => {
            console.log(err)
        })


        function createReceiverInput(receiver){
            $("<input>").attr({
                type: "hidden",
                id: "receiver",
                name: "receiver",
                value: receiver
            })
            .appendTo("form")
        }


        function catchReceiver(event, receiver){
            
            if(!receiver){
                receiver = event.target.id.split(" ")[1]
            }

            //cria um botao para mandar a msg pra um user
            if(!$("input#receiver").length){

                createReceiverInput(receiver)
            }else{
            
                $("input#receiver").val(receiver)

            }
        } 

        //carrega os users online
        socket.on("users", (users) => {
 
            for(const user of users){          
                $("<button/>", {
                    text: user.user.name, 
                    id:"user " + user.user.id,
                   on: {
                        click: function (event){
                            
                            catchReceiver(event)
                        
                        }
                    }
                   
                }).appendTo(".rooms")
                
            }
      
        })


        //para o usuario que mandou
        function renderSubmitedMessage(message){

            $(".messages").append("<div class='message'> <strong> " + message.sender.name + "</strong>: " + message.message +"</div>")
        
        }

        //para um user que vai receber
        function renderEmitedMessage(message){
        
             //se for de um usuario
            if(message.sender.id){
                
                catchReceiver(event, message.sender.id)
            }

            $(".messages").append("<div class='message'> <strong> " + message.sender.name + "</strong>: " + message.message +"</div>")
        
        
        }

        // <!--vai pegar as msgs passadaas-->
        //carrega msgs antigas
        socket.on("previous_messages", (messages) => {
            for(message of messages){
                renderEmitedMessage(message)
            }
        })

   
        // <!--vai pegar a msg que foi emitida e exibir para os outros users -->
        socket.on("emit_message", (message) => {
        
            renderEmitedMessage(message)
        })

        

        {# const receiver #}

        // vai mandar a msg pro servidor
        $("#chat").submit(function(event){
    
            event.preventDefault()

            var message = $("input[name=message]").val()

            $("input[name=message]").val("")

            var receiver = $("input[name=receiver]").val()
            
            if(message.length){

                var messageObject = {
                    sender: {name:"{{user.name}}", id:"{{user.id}}"},
                    receiver,
                    message
                }
    
                //renderiza na tela de que esta enviando apenas
                renderSubmitedMessage(messageObject)

                //envia pro servidor, para ser emitada para outro user
                
                socket.emit("send_message", messageObject)

            }


        }) 


        //muda de sala
        $(".room").click(function(event){
        
            const [, room] = event.target.className.split(" ")



            socket.emit("join_room", room)
        
        })

        

        
        

    </script>

    <script src="scripts.js"></script>
</body>
</html>